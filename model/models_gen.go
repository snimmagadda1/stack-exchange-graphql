// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CommentEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Comment `json:"node"`
}

type CommentsCursor struct {
	Edges    []*CommentEdge `json:"edges"`
	PageInfo *PageInfo      `json:"pageInfo"`
}

type CommentsOrderBy struct {
	Field *CommentSortFields `json:"field"`
	Order *Order             `json:"order"`
}

type CommentsWhere struct {
	Order *CommentsOrderBy `json:"order"`
}

type PageInfo struct {
	HasPreviousPage bool `json:"hasPreviousPage"`
	HasNextPage     bool `json:"hasNextPage"`
}

type PostEdge struct {
	Cursor string `json:"cursor"`
	Node   *Post  `json:"node"`
}

type PostsCursor struct {
	Edges    []*PostEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type PostsOrderBy struct {
	Field *PostsSortFields `json:"field"`
	Order *Order           `json:"order"`
}

type PostsWhere struct {
	Order *PostsOrderBy `json:"order"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type UsersCursor struct {
	Edges    []*UserEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type UsersOrderBy struct {
	Field *UsersSortFields `json:"field"`
	Order *Order           `json:"order"`
}

type UsersWhere struct {
	Order *UsersOrderBy `json:"order"`
}

type CommentSortFields string

const (
	CommentSortFieldsCreation CommentSortFields = "creation"
	CommentSortFieldsVotes    CommentSortFields = "votes"
)

var AllCommentSortFields = []CommentSortFields{
	CommentSortFieldsCreation,
	CommentSortFieldsVotes,
}

func (e CommentSortFields) IsValid() bool {
	switch e {
	case CommentSortFieldsCreation, CommentSortFieldsVotes:
		return true
	}
	return false
}

func (e CommentSortFields) String() string {
	return string(e)
}

func (e *CommentSortFields) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentSortFields", str)
	}
	return nil
}

func (e CommentSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Order string

const (
	OrderDesc Order = "DESC"
	OrderAsc  Order = "ASC"
)

var AllOrder = []Order{
	OrderDesc,
	OrderAsc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderDesc, OrderAsc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostsSortFields string

const (
	PostsSortFieldsOpaqueKey PostsSortFields = "opaqueKey"
	PostsSortFieldsActivity  PostsSortFields = "activity"
	PostsSortFieldsCreation  PostsSortFields = "creation"
	PostsSortFieldsVotes     PostsSortFields = "votes"
)

var AllPostsSortFields = []PostsSortFields{
	PostsSortFieldsOpaqueKey,
	PostsSortFieldsActivity,
	PostsSortFieldsCreation,
	PostsSortFieldsVotes,
}

func (e PostsSortFields) IsValid() bool {
	switch e {
	case PostsSortFieldsOpaqueKey, PostsSortFieldsActivity, PostsSortFieldsCreation, PostsSortFieldsVotes:
		return true
	}
	return false
}

func (e PostsSortFields) String() string {
	return string(e)
}

func (e *PostsSortFields) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostsSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostsSortFields", str)
	}
	return nil
}

func (e PostsSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UsersSortFields string

const (
	UsersSortFieldsReputation UsersSortFields = "reputation"
	UsersSortFieldsCreation   UsersSortFields = "creation"
	UsersSortFieldsName       UsersSortFields = "name"
)

var AllUsersSortFields = []UsersSortFields{
	UsersSortFieldsReputation,
	UsersSortFieldsCreation,
	UsersSortFieldsName,
}

func (e UsersSortFields) IsValid() bool {
	switch e {
	case UsersSortFieldsReputation, UsersSortFieldsCreation, UsersSortFieldsName:
		return true
	}
	return false
}

func (e UsersSortFields) String() string {
	return string(e)
}

func (e *UsersSortFields) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UsersSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UsersSortFields", str)
	}
	return nil
}

func (e UsersSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
