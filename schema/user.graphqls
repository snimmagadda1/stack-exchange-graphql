extend type Query {
    getUser(id: Int!): User
    allUsersCursor(
        first: Int = 10
        after: String
        where: UsersWhere
    ): UsersCursor
}

type User {
    id: ID!
    reputation: String
    creationDate: Time
    displayName: String
    lastAccessDate: Time
    views: Int
    websiteUrl: String
    location: String
    aboutMe: String
    age: Int
    upVotes: Int
    downVotes: Int
    emailHash: String
    accountId: Int
    lastAccessedDate: Time
    profileImageUrl: String
}

enum UsersSortFields {
    reputation
    creation
    name
    # modified Note: not avail on public data
}

type UserEdge {
    cursor: String!
    node: User!
}

type UsersCursor {
    edges: [UserEdge]!
    pageInfo: PageInfo
}

input UsersOrderBy {
    field: UsersSortFields
    order: Order
}

input UsersWhere {
    order: UsersOrderBy
}
