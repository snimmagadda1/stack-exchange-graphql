type Query {
    getUser(id: Int!): User
    getPost(id: Int!): Post
    getPostHistory(id: Int!): PostHistory
    getBadge(id: Int!): Badge
    getComment(id: Int!): Comment
    getVote(id: Int!): Vote

    allPostsCursor(
        first: Int = 10
        after: String
        where: PostsWhere
    ): PostsCursor
    allCommentsCursor(first: Int = 10, after: String): CommentsCursor
    allUsersCursor(
        first: Int = 10
        after: String
        where: UsersWhere
    ): UsersCursor
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    # startCursor: String
    # endCursor: String
}

enum Order {
    DESC
    ASC
}

enum PostsSortFields {
    opaqueKey
    activity
    creation
    votes
}

enum UsersSortFields {
    reputation
    creation
    name
    # modified Note: not avail on public data dumps
}

type PostHistory {
    id: ID!
    postHistoryTypeId: Int
    postId: Int
    revisionGUID: String
    creationDate: Time
    userId: Int
    userDisplayName: String
    comment: String
    closeReasonTypes: Int
    postNoticeId: Int
    text: String
    contentLicense: String
}

type Badge {
    id: ID!
    userId: Int
    name: String
    date: Time
    class: Int
    badgeClass: Int
    TagBased: Int
}

type Vote {
    id: ID!
    postId: Int
    voteTypeId: Int
    userId: Int
    creationDate: Time
    bountyAmount: Int
}

scalar Time
